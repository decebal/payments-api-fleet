# Core definitions

interface Connection {
    edges: [Entity]
    pageInfo: PageInfo!
    totalCount: NaturalNumber
}

# Sort info for sorting connection's edges.
input Sorting {
    orderBy: String
    orderDirection: String
}

# Page info for paginating a connection.
type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: Cursor
    endCursor: Cursor
}

# A cursor used in paginating connections. Represented as a base64 encoded string.
scalar Cursor

scalar OrderDirection

interface Entity {
    id: ID!
}

# A currency trading symbol e.g. USD
scalar Currency

# A natural number (integer >= 0)
scalar NaturalNumber

# A float with 2 decimals
scalar ShortFloat

# full name e.g. "Wilfred Jeremiah Owens"
scalar Name

# short version of name e.g. "W Owens"
scalar ShortName

# date of format YYYY-MM-DD e.g."2017-01-18"
scalar Date

# e.g. "10 Debtor Crescent Sourcetown NE1"
scalar Address

type Charge {
  amount: ShortFloat
  currency: Currency
}

type BeneficiaryParty {
  account_name: ShortName
  account_number: String
  account_number_code: String
  account_type: NaturalNumber
  address: Address
  bank_id: String
  bank_id_code: String
  name: Name
}

type ChargesInformation {
  bearer_code: String
  sender_charges: [Charge]
  receiver_charges_amount: ShortFloat
  receiver_charges_currency: Currency
}

type DebtorParty {
  account_name: ShortName
  account_number: String
  account_number_code: String
  address: Address
  bank_id: String
  bank_id_code: String
  name: Name
}

type Fx {
  contract_reference: String
  exchange_rate: Float
  original_amount: ShortFloat
  original_currency: Currency
}

type SponsorParty {
  account_number: String
  bank_id: String
  bank_id_code: String
}

type Attributes {
    amount: ShortFloat
    beneficiary_party: BeneficiaryParty
    charges_information: ChargesInformation
    currency: Currency
    debtor_party: DebtorParty
    end_to_end_reference: String
    fx: Fx
    numeric_reference: Int
    payment_id: String
    payment_purpose: String
    payment_scheme: String
    payment_type: String
    processing_date: Date
    reference: String
    scheme_payment_sub_type: String
    scheme_payment_type: String
    sponsor_party: SponsorParty
}

# A member of a Memorial on Memoria.
type Payment implements Entity {
    id: ID!
    type: String!
    version: Int!
    organisation_id: ID!
    attributes: Attributes
}

type PaymentsConnection implements Connection {
    edges: [Payment!]!
    pageInfo: PageInfo!
    totalCount: NaturalNumber
}

input StorePaymentInput {
    id: ID
}

type StorePaymentPayload {
    payment: Payment
}

input RemovePaymentInput {
    id: ID!
}

type RemovePaymentPayload {
    payment: Payment
}


type Query {
  # Retrieve a payment by said parameters.
  payment(
    # The ID of the payment.
    id: ID!
  ): Payment

  # Retrieve payments using Relay connection principles.
  payments(
    first: NaturalNumber = 10
    after: Cursor
    last: NaturalNumber
    before: Cursor
    sort: Sorting
  ): PaymentsConnection
}

type Mutation {
    storePayment(input: StorePaymentInput!): StorePaymentPayload
    removePayment(input: RemovePaymentInput!): RemovePaymentPayload
}
